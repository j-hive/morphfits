"""Configure and setup a program execution of the GalWrap package.
"""

# Imports


import logging
from pathlib import Path

import yaml

from . import paths
from .setup import GalWrapConfig


# Logger


logger = logging.getLogger("CONFIG")
"""Logger object for this module.
"""


# Functions


def create_config(
    config_path: str | Path | None = None,
    galwrap_root: str | Path | None = None,
    input_root: str | Path | None = None,
    product_root: str | Path | None = None,
    output_root: str | Path | None = None,
    field: str | None = None,
    fields: list[str] | None = None,
    image_version: str | None = None,
    image_versions: list[str] | None = None,
    catalog_version: str | None = None,
    catalog_versions: list[str] | None = None,
    filter: str | None = None,
    filters: list[str] | None = None,
    object: int | None = None,
    objects: list[int] | None = None,
    pixscale: float | None = None,
    pixscales: list[float] | None = None,
    morphology_version: str | None = None,
    morphology_versions: list[str] | None = None,
) -> GalWrapConfig:
    """Create a GalWrap configuration object from hierarchically preferred
    variables, in order of values from
        1. CLI call from terminal
        2. Specified config file,
        3. Filesystem discovery

    Parameters
    ----------
    config_path : str | Path | None, optional
        Path to user config yaml file, by default None (no user config file
        provided).
    galwrap_root : str | Path | None, optional
        Path to root directory of GalWrap filesystem, by default None (not
        passed through CLI).
    input_root : str | Path | None, optional
        Path to root directory of input products, e.g. catalogs, science images,
        and PSFs, by default None (not passed through CLI).
    product_root : str | Path | None, optional
        Path to root directory of products generated by this program to execute
        GALFIT, e.g. cutouts/stamps, masks, and feedfiles, by default None (not
        passed through CLI).
    output_root : str | Path | None, optional
        Path to root directory of GALFIT output products, e.g. morphology model
        and plots, by default None (not passed through CLI).
    field : str | None, optional
        Single field over which to execute GALFIT, by default None (not passed
        through CLI).
    fields : list[str] | None, optional
        List of fields over which to execute GALFIT, by default None (not passed
        through CLI).
    image_version : str | None, optional
        Single image version over which to execute GALFIT, by default None (not
        passed through CLI).
    image_versions : list[str] | None, optional
        List of image versions over which to execute GALFIT, by default None
        (not passed through CLI).
    catalog_version : str | None, optional
        Single catalog version over which to execute GALFIT, by default None
        (not passed through CLI).
    catalog_versions : list[str] | None, optional
        List of catalog versions over which to execute GALFIT, by default None
        (not passed through CLI).
    filter : str | None, optional
        Single filter band over which to execute GALFIT, by default None (not
        passed through CLI).
    filters : list[str] | None, optional
        List of filter bands over which to execute GALFIT, by default None (not
        passed through CLI).
    object : int | None, optional
        Single target IDs over which to execute GALFIT, for each catalog, by
        default None (not passed through CLI).
    objects : list[int] | None, optional
        List of target IDs over which to execute GALFIT, for each catalog, by
        default None (not passed through CLI).
    pixscale : float | None, optional
        Single pixel scale over which to execute GALFIT, by default None (not
        passed through CLI).
    pixscales : list[float] | None, optional
        List of pixel scales over which to execute GALFIT, by default None (not
        passed through CLI).
    morphology_version : str | None, optional
        Single morphology fitting method to execute, by default None (not passed
        through CLI).
    morphology_versions : list[str] | None, optional
        List of morphology fitting methods to execute, by default None (not
        passed through CLI).

    Returns
    -------
    GalWrapConfig
        A configuration object for this program execution.

    Notes
    -----
    If both the single and multiple version for a variable are given (e.g.
    `field` and `fields` both have values from CLI), only the single version
    will be used.
    """
    # Load config file values
    config_dict = {} if config_path is None else yaml.safe_load(open(config_path))
    ## Cast and resolve paths
    for config_key in ["galwrap_root", "input_root", "product_root", "output_root"]:
        if config_key in config_dict:
            config_dict[config_key] = Path(config_dict[config_key]).resolve()

    # Set any parameters passed through CLI call
    ## Paths
    if galwrap_root is not None:
        config_dict["galwrap_root"] = paths.get_path_obj(galwrap_root)
    if input_root is not None:
        config_dict["input_root"] = paths.get_path_obj(input_root)
    if product_root is not None:
        config_dict["product_root"] = paths.get_path_obj(product_root)
    if output_root is not None:
        config_dict["output_root"] = paths.get_path_obj(output_root)

    ### Terminate if input root not found
    if "input_root" not in config_dict:
        raise FileNotFoundError(f"Input root not passed, terminating.")
    if "galwrap_root" not in config_dict:
        config_dict["galwrap_root"] = config_dict["input_root"].parent
    if "product_root" not in config_dict:
        config_dict["product_root"] = config_dict["galwrap_root"] / "products"
    if "output_root" not in config_dict:
        config_dict["output_root"] = config_dict["galwrap_root"] / "output"

    ## Multiple FICLOs
    if fields is not None:
        config_dict["fields"] = fields
    if image_versions is not None:
        config_dict["image_versions"] = image_versions
    if catalog_versions is not None:
        config_dict["catalog_versions"] = catalog_versions
    if filters is not None:
        config_dict["filters"] = filters
    if objects is not None:
        config_dict["objects"] = objects
    if pixscales is not None:
        config_dict["pixscales"] = pixscales
    if morphology_versions is not None:
        config_dict["morphology_versions"] = morphology_versions

    ## Single FICLOs - note this will override multiple FICLOs if set
    if field is not None:
        config_dict["fields"] = [field]
    if image_version is not None:
        config_dict["image_versions"] = [image_version]
    if catalog_version is not None:
        config_dict["catalog_versions"] = [catalog_version]
    if filter is not None:
        config_dict["filters"] = [filter]
    if object is not None:
        config_dict["objects"] = [object]
    if pixscale is not None:
        config_dict["pixscales"] = [pixscale]
    if morphology_version is not None:
        config_dict["morphology_versions"] = [morphology_version]

    # If parameters are still unset, assume program execution over all
    # discovered values in input directory
    for parameter in [
        "field",
        "image_version",
        # "catalog_version",
        "filter",
        "object",
        # "pixscale",
    ]:
        if parameter + "s" not in config_dict:
            config_dict[parameter + "s"] = paths.find_parameter_from_input(
                parameter, config_dict["input_root"]
            )

    # Create and return GalWrapConfig object from dict
    galwrap_config = GalWrapConfig(**config_dict)
    return galwrap_config
