"""Resolve, create, and otherwise handle directory and file structure for
GalWrap.
"""

# Imports


from pathlib import Path

from .. import PATH_NAMES
from ..galwrap import GalWrapPath, FICLO, GalWrapConfig
from . import science



# Functions


## Utility


def get_path_obj(path_like: str | Path) -> Path:
    """Get a Path object for a potential string.

    Parameters
    ----------
    path_like : str | Path
        Path which may or may not be of string type.

    Returns
    -------
    Path
        Corresponding Path object.
    """
    return Path(path_like).resolve() if isinstance(path_like, str) else path_like


def get_directories(path: Path) -> list[Path]:
    """Get a list of subdirectories under a path.

    Parameters
    ----------
    path : Path
        Path to be walked.

    Returns
    -------
    list[Path]
        List of subdirectories under specified path.

    Raises
    ------
    ValueError
        Specified path not a directory.
    """
    if path.is_dir():
        return [item for item in path.iterdir() if item.is_dir()]
    else:
        raise ValueError(f"Path {path} is not a directory.")


def get_files(path: Path) -> list[Path]:
    """Get a list of files in a directory.

    Parameters
    ----------
    path : Path
        Path to be walked.

    Returns
    -------
    list[Path]
        List of files in specified directory.

    Raises
    ------
    ValueError
        Specified path not a directory.
    """
    if path.is_dir():
        return [item for item in path.iterdir() if item.is_file()]
    else:
        raise ValueError(f"Path {path} is not a directory.")


## Parameters


def get_parameter(
    name: str,
    parameter: int | float | str | Path | list[float] | list[str] | None,
    instance: GalWrapConfig | FICLO | None,
) -> int | float | str | Path | list[float] | list[str]:
    """Get the hierarchically preferred value for a parameter, where parameter
    refers to a program execution's configuration variables, e.g. `field` or
    `filter`.

    Parameters
    ----------
    name : str
        Name of parameter.
    parameter : int | float | str | Path | list[float] | list[str] | None
        Value passed directly into function.
    instance : GalWrapConfig | FICLO | None
        Values stored in object generated by configuration.

    Returns
    -------
    int | float | str | Path | list[float] | list[str]
        Hierarchically preferred value, in order of directly passed value, then
        that of the instance.

    Raises
    ------
    AttributeError
        Value passed neither directly nor via object.

    Notes
    -----
    Internal function used by :func:``get_path``. Should not be exposed to user,
    so `name` is standardized.
    """
    # Validate parameter existence and return corresponding value, in preference
    # of directly passed parameter, then object instance attribute

    ## Multiple parameters
    if name[-1] == "s":
        if (parameter is None) and (
            (instance is None) or (len(vars(instance)[name]) == 0)
        ):
            raise AttributeError(f"{name.capitalize()} not passed.")
        else:
            return vars(instance)[name] if parameter is None else parameter

    ## Single parameters
    else:
        if (parameter is None) and (instance is None):
            raise AttributeError(f"{name.capitalize()} not passed.")
        else:
            resolved_parameter = (
                vars(instance)[name] if parameter is None else parameter
            )

            ### Path parameters
            if "root" in name:
                return get_path_obj(resolved_parameter)
            ### Other parameters
            else:
                return resolved_parameter


def get_parameters_from_input_dirs(
    name: str, input_root: Path
) -> list[str] | list[int] | list[float]:
    # TODO note will get FIC for all O, but not all O will have each FIC
    # so skip galfit run if OFIC doesn't have input

    name = get_parameter_name(name)
    parameters = []

    if "object" in name:
        for object_dir in get_directories(input_root):
            if object_dir.name not in parameters:
                parameters.append(object_dir.name)
    elif "field" in name:
        for object_dir in get_directories(input_root):
            for field_dir in get_directories(object_dir):
                if field_dir.name not in parameters:
                    parameters.append(field_dir.name)
    elif "image" in name:
        for object_dir in get_directories(input_root):
            for field_dir in get_directories(object_dir):
                for ic_dir in get_directories(field_dir):
                    if "." in ic_dir.name:
                        if ic_dir.name.split(".")[0] not in parameters:
                            parameters.append(ic_dir.name.split(".")[0])
                    else:
                        if ic_dir.name not in parameters:
                            parameters.append(ic_dir.name)
    elif "catalog" in name:
        for object_dir in get_directories(input_root):
            for field_dir in get_directories(object_dir):
                for ic_dir in get_directories(field_dir):
                    if "." in ic_dir.name:
                        if ic_dir.name.split(".")[1] not in parameters:
                            parameters.append(int(ic_dir.name.split(".")[1]))
    elif "filter" in name:
        for object_dir in get_directories(input_root):
            for field_dir in get_directories(object_dir):
                for ic_dir in get_directories(field_dir):
                    if "." in ic_dir.name:
                        for file in get_files(ic_dir / "psfs"):
                            if file.name:
                                pass


## Path Resolution


def get_path_name(name: str) -> str:
    """Get internally-standardized name of path corresponding to passed name.

    Parameters
    ----------
    name: str
        Name of directory or file, e.g. `input_images`.

    Returns
    -------
    str
        Corresponding standardized path name for internal usage.

    Raises
    ------
    TypeError
        Passed name not a str.
    ValueError
        Passed name unrecognized.

    Notes
    -----
    A path name is resolvable if its casefold is equal to
    1. The standardized path name itself
        e.g `input_images`
    2. A recognized alternative name
        e.g. `images` for `input_images`
    3. The standardized path name, separated by spaces rather than underscores
        e.g. `input images` for `input_images`
    4. The standardized path name, space-separated, with a corresponding `dir`
       or `file` suffix
        e.g. `input images dir` for `input_images`
    5. The standardized path name, space-separated, suffixed, un-pluralized
        e.g. `input image dir` for `input_images`

    See Also
    --------
    data/galwrap_path_names.yaml
        List of recognized alternative path names for each path.
    """
    # Terminate if name is not str
    if not isinstance(name, str):
        raise TypeError(f"Path name {name} must be `str`, not {type(name)}.")

    # Set name for case-less comparison
    name = name.casefold()

    # Find and return path name among recognized names
    for path_name, path_item in GALWRAP_PATHS.items():
        # 1. Exact match
        if name == path_name:
            return path_name

        # 2. Alternate name match
        if name in path_item.alts:
            return path_name

        # 3. Space rather than underscore delimiter
        path_name_case_3 = " ".join(path_name.split("_"))
        if ("_" in path_name) and (name == path_name_case_3):
            return path_name

        # 4. Space delimiter and `dir` or `file` suffix
        if name == path_name_case_3 + " file" if path_item.file else " dir":
            return path_name

        # 5. Space delimiter, `dir` or `file` suffix, and un-pluralized
        if ("s" == path_name[-1]) and (
            name == path_name_case_3[:-1] + " file" if path_item.file else " dir"
        ):
            return path_name

    # Terminate if name not found
    raise ValueError(f"Unrecognized path name '{name}'.")


def get_path(
    name: str,
    galwrap_config: GalWrapConfig | None = None,
    photometry_root: Path | str | None = None,
    imaging_root: Path | str | None = None,
    output_root: Path | str | None = None,
    ofic: OFIC | None = None,
    object: str | None = None,
    field: str | None = None,
    image_version: str | None = None,
    catalog_version: int | None = None,
    filter: str | None = None,
    galaxy_id: int | None = None,
    pixscale: float | None = None,
    pixscales: list[float] | None = None,
) -> Path | list[Path]:
    """Get the path to a directory or file via a recognized name.

    Parameters
    ----------
    name : str
        Name of the directory or file.
    galwrap_config : GalWrapConfig | None, optional
        Configuration parameters for program execution, by default None.
    photometry_root : Path | str | None, optional
        Path to root of input photometry products, by default unspecified,
        meaning it must be set by a passed GalWrapConfig object.
    imaging_root : Path | str | None, optional
        Path to root of input imaging products, by default unspecified, meaning
        it must be set by a passed GalWrapConfig object.
    output_root : Path | str | None, optional
        Path to root directory of output GalWrap products, by default
        unspecified, meaning it must be set by a passed GalWrapConfig object.
    ofic : OFIC | None, optional
        Data object containing the object, field, image version, and catalog
        version for a program execution, by default None.
    object : str | None, optional
        Center of cluster to be fitted, by default unspecified, meaning it must
        be set by a passed OFIC object.
    field : str | None, optional
        Field of cluster to be fitted, by default unspecified, meaning it must
        be set by a passed OFIC object.
    image_version : str | None, optional
        Image version of input data, by default unspecified, meaning it must be
        set by a passed OFIC object.
    catalog_version : int | None, optional
        Catalog version of input data, by default unspecified, meaning it must
        be set by a passed OFIC object.
    filter : str | None, optional
        Filter of input image data, by default None (unspecified).
    galaxy_id : int | None, optional
        ID of galaxy, by default None.
    pixscale : float | None, optional
        Pixel scale resolution, by default None.
    pixscales : list[float] | None, optional
        Pixel scale resolutions, by default None.

    Returns
    -------
    Path | list[Path]
        Path(s) to directory or file corresponding to passed name.

    Raises
    ------
    AttributeError
        Necessary input passed neither directly nor via object, e.g.
        `object=None` and `ofic=None`.

    See Also
    --------
    data.path_names.yaml
        Standardized path names and their recognized alternative names.
    """
    # Get corresponding standardized path name
    path_name = get_path_name(name)

    # All paths require an object, field, and image version
    object = get_parameter("object", object, ofic)
    field = get_parameter("field", field, ofic)
    image_version = get_parameter("image_version", image_version, ofic)

    # Return corresponding path
    match path_name:
        # Photometry
        ## Parent
        case "photometry_ofi":
            photometry_root = get_parameter(
                "photometry_root", photometry_root, galwrap_config
            )
            return photometry_root / object / field / image_version
        ## OFI Directories
        case "photometry_rms":
            return (
                get_path(
                    name="photometry_ofi",
                    object=object,
                    field=field,
                    image_version=image_version,
                    ofic=ofic,
                    photometry_root=photometry_root,
                    galwrap_config=galwrap_config,
                )
                / "rms"
            )

        # Imaging
        ## Parent
        case "imaging_of":
            imaging_root = get_parameter("imaging_root", imaging_root, galwrap_config)
            return imaging_root / object / field
        case "imaging_ofic":
            catalog_version = get_parameter("catalog_version", catalog_version, ofic)
            return (
                get_path(
                    name="imaging_of",
                    object=object,
                    field=field,
                    image_version=image_version,
                    ofic=ofic,
                    imaging_root=imaging_root,
                    galwrap_config=galwrap_config,
                )
                / f"{image_version}.{catalog_version}"
            )
        ## OFI Directories
        case "imaging_sci":
            return (
                get_path(
                    name="imaging_of",
                    object=object,
                    field=field,
                    image_version=image_version,
                    ofic=ofic,
                    imaging_root=imaging_root,
                    galwrap_config=galwrap_config,
                )
                / image_version
                / "science"
            )
        case "file_science_images":
            # TODO handle filters too
            # Paths to science images for single pixscale
            try:
                pixscale = get_parameter("pixscale", pixscale, ofic)
                return list(
                    get_path(
                        name="imaging_sci",
                        object=object,
                        field=field,
                        image_version=image_version,
                        ofic=ofic,
                        imaging_root=imaging_root,
                        galwrap_config=galwrap_config,
                    ).glob(f"*{science.scale_to_name(pixscale)}*_sci.fits")
                )
            # Paths to science images for multiple pixscales
            except AttributeError:
                pixscales = get_parameter("pixscales", pixscales, galwrap_config)
                science_images = []
                for pixscale in pixscales:
                    # Get paths to each science image
                    science_images_pixscale = list(
                        get_path(
                            name="imaging_sci",
                            object=object,
                            field=field,
                            image_version=image_version,
                            ofic=ofic,
                            imaging_root=imaging_root,
                            galwrap_config=galwrap_config,
                        ).glob(f"*{science.scale_to_name(pixscale)}*_sci.fits")
                    )

                    # Add paths to total list
                    for science_image in science_images_pixscale:
                        science_images.append(science_image)
                return science_images
        case "imaging_bcgs":
            return (
                get_path(
                    name="imaging_of",
                    object=object,
                    field=field,
                    image_version=image_version,
                    ofic=ofic,
                    imaging_root=imaging_root,
                    galwrap_config=galwrap_config,
                )
                / image_version
                / "bcgs"
            )
        ## OFIC Directories
        case "imaging_psfs":
            return (
                get_path(
                    name="imaging_ofic",
                    object=object,
                    field=field,
                    image_version=image_version,
                    catalog_version=catalog_version,
                    ofic=ofic,
                    imaging_root=imaging_root,
                    galwrap_config=galwrap_config,
                )
                / "psfs"
            )
        case "imaging_catalogs":
            return (
                get_path(
                    name="imaging_ofic",
                    object=object,
                    field=field,
                    image_version=image_version,
                    catalog_version=catalog_version,
                    ofic=ofic,
                    imaging_root=imaging_root,
                    galwrap_config=galwrap_config,
                )
                / "catalogs"
            )
        ## OFIC Files
        case "file_segmap":
            return (
                get_path(
                    name="imaging_catalogs",
                    object=object,
                    field=field,
                    image_version=image_version,
                    catalog_version=catalog_version,
                    ofic=ofic,
                    imaging_root=imaging_root,
                    galwrap_config=galwrap_config,
                )
                / f"{object}{field}_photutils_segmap_{image_version}.{catalog_version}.fits"
            )
        case "file_photometry_catalog":
            return (
                get_path(
                    name="imaging_catalogs",
                    object=object,
                    field=field,
                    image_version=image_version,
                    catalog_version=catalog_version,
                    ofic=ofic,
                    imaging_root=imaging_root,
                    galwrap_config=galwrap_config,
                )
                / f"{object}{field}_photutils_cat_{image_version}.{catalog_version}.fits"
            )

        # Output
        ## Parent
        case "output_ofic":
            output_root = get_parameter("output_root", output_root, galwrap_config)
            catalog_version = get_parameter("catalog_version", catalog_version, ofic)
            return output_root / object / field / f"{image_version}.{catalog_version}"
        ## OFIC Directories
        case "output_segmaps":
            return (
                get_path(
                    name="output_ofic",
                    object=object,
                    field=field,
                    image_version=image_version,
                    catalog_version=catalog_version,
                    ofic=ofic,
                    output_root=output_root,
                    galwrap_config=galwrap_config,
                )
                / "segmaps"
            )
        case "output_masks":
            return (
                get_path(
                    name="output_ofic",
                    object=object,
                    field=field,
                    image_version=image_version,
                    catalog_version=catalog_version,
                    ofic=ofic,
                    output_root=output_root,
                    galwrap_config=galwrap_config,
                )
                / "masks"
            )
        case "output_psfs":
            return (
                get_path(
                    name="output_ofic",
                    object=object,
                    field=field,
                    image_version=image_version,
                    catalog_version=catalog_version,
                    ofic=ofic,
                    output_root=output_root,
                    galwrap_config=galwrap_config,
                )
                / "psfs"
            )
        case "output_rms":
            return (
                get_path(
                    name="output_ofic",
                    object=object,
                    field=field,
                    image_version=image_version,
                    catalog_version=catalog_version,
                    ofic=ofic,
                    output_root=output_root,
                    galwrap_config=galwrap_config,
                )
                / "rms"
            )
        case "output_stamps":
            return (
                get_path(
                    name="output_ofic",
                    object=object,
                    field=field,
                    image_version=image_version,
                    catalog_version=catalog_version,
                    ofic=ofic,
                    output_root=output_root,
                    galwrap_config=galwrap_config,
                )
                / "stamps"
            )
        case "output_feedfiles":
            return (
                get_path(
                    name="output_ofic",
                    object=object,
                    field=field,
                    image_version=image_version,
                    catalog_version=catalog_version,
                    ofic=ofic,
                    output_root=output_root,
                    galwrap_config=galwrap_config,
                )
                / "feedfiles"
            )
        case "output_galfit":
            return (
                get_path(
                    name="output_ofic",
                    object=object,
                    field=field,
                    image_version=image_version,
                    output_root=output_root,
                    galwrap_config=galwrap_config,
                    catalog_version=catalog_version,
                    ofic=ofic,
                )
                / "galfit_output"
            )
        case "output_visualizations":
            return (
                get_path(
                    name="output_ofic",
                    object=object,
                    field=field,
                    image_version=image_version,
                    catalog_version=catalog_version,
                    ofic=ofic,
                    output_root=output_root,
                    galwrap_config=galwrap_config,
                )
                / "visualizations"
            )
        ## OFIC Files
        case "file_filter_info":
            return (
                get_path(
                    name="output_ofic",
                    object=object,
                    field=field,
                    image_version=image_version,
                    catalog_version=catalog_version,
                    ofic=ofic,
                    output_root=output_root,
                    galwrap_config=galwrap_config,
                )
                / f"{object}{field}_{image_version}_filter_info.dat"
            )
        case "file_depth":
            return (
                get_path(
                    name="output_ofic",
                    object=object,
                    field=field,
                    image_version=image_version,
                    catalog_version=catalog_version,
                    ofic=ofic,
                    output_root=output_root,
                    galwrap_config=galwrap_config,
                )
                / f"{object}{field}_{image_version}_depth.txt"
            )
        case "file_mask":
            return (
                get_path(
                    name="output_masks",
                    object=object,
                    field=field,
                    image_version=image_version,
                    catalog_version=catalog_version,
                    ofic=ofic,
                    output_root=output_root,
                    galwrap_config=galwrap_config,
                )
                / f"{galaxy_id}_{object}{field}_mask.fits"
            )
        case "file_science":
            filter = get_parameter("filter", filter, ofic)
            galaxy_id = get_parameter("galaxy_id", galaxy_id, ofic)
            return (
                get_path(
                    name="output_stamps",
                    object=object,
                    field=field,
                    image_version=image_version,
                    catalog_version=catalog_version,
                    ofic=ofic,
                    output_root=output_root,
                    galwrap_config=galwrap_config,
                )
                / filter
                / f"{galaxy_id}_{object}{field}-{filter}_sci.fits"
            )


## Setup


def setup_directories(
    galwrap_config: GalWrapConfig | None = None,
    photometry_root: Path | str | None = None,
    imaging_root: Path | str | None = None,
    output_root: Path | str | None = None,
    ofic: OFIC | None = None,
    object: str | None = None,
    field: str | None = None,
    image_version: str | None = None,
    catalog_version: int | None = None,
    filter: str | None = None,
    filters: list[str] | None = None,
):
    """Validate input directory existence and create output directories where
    nonexistent, for a given program configuration.

    Parameters
    ----------
    galwrap_config : GalWrapConfig | None, optional
        Configuration parameters for program execution, by default None.
    photometry_root : Path | str | None, optional
        Path to root of input photometry products, by default unspecified,
        meaning it must be set by a passed GalWrapConfig object.
    imaging_root : Path | str | None, optional
        Path to root of input imaging products, by default unspecified, meaning
        it must be set by a passed GalWrapConfig object.
    output_root : Path | str | None, optional
        Path to root directory of output GalWrap products, by default
        unspecified, meaning it must be set by a passed GalWrapConfig object.
    ofic : OFIC | None, optional
        Data object containing the object, field, image version, and catalog
        version for a program execution, by default None.
    object : str | None, optional
        Center of cluster to be fitted, by default unspecified, meaning it must
        be set by a passed OFIC object.
    field : str | None, optional
        Field of cluster to be fitted, by default unspecified, meaning it must
        be set by a passed OFIC object.
    image_version : str | None, optional
        Image version of input data, by default unspecified, meaning it must be
        set by a passed OFIC object.
    catalog_version : int | None, optional
        Catalog version of input data, by default unspecified, meaning it must
        be set by a passed OFIC object.
    filter : str | None, optional
        Filter of input image data, by default None (unspecified).
    filters : list[str] | None, optional
        List of filters of input image data, by default None (unspecified).

    Raises
    ------
    FileNotFoundError
        Input directory not found.
    """
    # Validate each expected input directory exists
    for path_name in PATH_NAMES["photometry"] | PATH_NAMES["imaging"]:
        # Skip files
        if "file" in path_name:
            continue

        # Terminate if input directory does not exist
        directory_path = get_path(
            path_name,
            galwrap_config=galwrap_config,
            photometry_root=photometry_root,
            imaging_root=imaging_root,
            ofic=ofic,
            object=object,
            field=field,
            image_version=image_version,
            catalog_version=catalog_version,
        )
        if not (directory_path.exists() and directory_path.is_dir()):
            raise FileNotFoundError(
                f"Input directory {path_name} expected, but not found."
            )

        # TODO check file existence

    # Iterate over each expected output directory
    for path_name in PATH_NAMES["output"]:
        # Skip files
        if "file" in path_name:
            continue

        # Create output directory if does not exist
        get_path(
            path_name,
            galwrap_config=galwrap_config,
            output_root=output_root,
            ofic=ofic,
            object=object,
            field=field,
            image_version=image_version,
            catalog_version=catalog_version,
        ).mkdir(parents=True, exist_ok=True)

    # Create filtered output subdirectories
    filtered_output_dirs = [
        "output_feedfiles",
        "output_galfit",
        "output_rms",
        "output_stamps",
    ]

    ## If list of filters is provided
    if filters is not None:
        for filtered_output_dir in filtered_output_dirs:
            for filter in filters:
                (
                    get_path(
                        filtered_output_dir,
                        galwrap_config=galwrap_config,
                        output_root=output_root,
                        ofic=ofic,
                        object=object,
                        field=field,
                        image_version=image_version,
                        catalog_version=catalog_version,
                    )
                    / filter
                ).mkdir(parents=True, exist_ok=True)

    ## If single filter is provided
    if filter is not None:
        for filtered_output_dir in filtered_output_dirs:
            (
                get_path(
                    filtered_output_dir,
                    galwrap_config=galwrap_config,
                    output_root=output_root,
                    ofic=ofic,
                    object=object,
                    field=field,
                    image_version=image_version,
                    catalog_version=catalog_version,
                )
                / filter
            ).mkdir(parents=True, exist_ok=True)
