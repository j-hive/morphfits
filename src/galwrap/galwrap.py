"""Main module for execution of GalWrap.
"""

# Imports


import itertools
from pathlib import Path
from typing import Optional, Generator, Annotated

from pydantic import BaseModel, StringConstraints


# Classes


class GalWrapPath(BaseModel):
    """Path model for a single path in the GalWrap filesystem structure.

    Parameters
    ----------
    BaseModel : class
        Base pydantic model class to enforce type validation upon creation.

    Attributes
    ----------
    file : bool
        Flag for whether path is a file.
    name : str
        Name of directory or file path points to.
    path : str
        Full path to directory or file path points to, as a string with
        templates (i.e. keywords wrapped in curly braces, e.g. {L} or {root}).
    alts : list[sr]
        List of recognized alternate names for this path.
    """

    file: bool
    name: str
    path: str
    alts: list[str]


LowerStr = Annotated[str, StringConstraints(to_lower=True)]
"""Lowercase string type for pydantic model.
"""


class FICLO(BaseModel):
    """Configuration model for a single program execution of GALFIT.

    Parameters
    ----------
    BaseModel : class
        Base pydantic model class to enforce type validation upon creation.

    Attributes
    ----------
    field : str
        Field of observation, e.g. "abell2744clu".
    image_version : str
        Version string of JWST image processing, e.g. "grizli-v7.2".
    catalog_version : str
        Version string of JWST cataloging, e.g. "dja-v7.2".
    filter : str
        Observational filter band, e.g. "f140w".
    object : int
        Integer ID of galaxy or cluster target in catalog, e.g. `1003`.
    pixscale : str, optional
        Pixel scale, in arcseconds per pixel, by default `0.04`, corresponding
        to "40mas".
    morphology_version : str, optional
        Version string of morphology fitting method, by default "galfit".

    Notes
    -----
    All strings upon instantiation will be converted to lowercase.
    FICLO refers to the Field, Image version, Catalog version, fiLter, and
    Object of a GALFIT execution.
    """

    field: LowerStr
    image_version: LowerStr
    catalog_version: LowerStr
    filter: LowerStr
    object: int
    pixscale: float = 0.04
    morphology_version: LowerStr = "galfit"


class GalWrapConfig(BaseModel):
    """Configuration model for a program execution of GalWrap.

    Parameters
    ----------
    BaseModel : class
        Base pydantic model class to enforce type validation upon creation.

    Attributes
    ----------
    input_root : Path
        Path to root directory of input products, e.g. catalogs, science images,
        and PSFs.
    product_root : Path
        Path to root directory of products generated by this program to execute
        GALFIT, e.g. cutouts/stamps, masks, and feedfiles.
    output_root : Path
        Path to root directory of GALFIT output products, e.g. morphology model
        and plots.
    fields : list[str]
        List of fields over which to execute GALFIT.
    image_versions : list[str]
        List of image versions over which to execute GALFIT.
    catalog_versions : list[str]
        List of catalog versions over which to execute GALFIT.
    filters : list[str]
        List of filter bands over which to execute GALFIT.
    objects : list[int]
        List of target IDs over which to execute GALFIT, for each catalog.
    pixscales : list[float], optional
        List of pixel scales over which to execute GALFIT, by default only `0.04`,
        corresponding to "40mas".
    morphology_versions : list[str], optional
        List of morphology fitting methods to execute, by default only GALFIT.
    """

    input_root: Path
    product_root: Path
    output_root: Path
    fields: list[str]
    image_versions: list[str]
    catalog_versions: list[str]
    filters: list[str]
    objects: list[int]
    pixscales: list[float] = [0.04]
    morphology_versions: list[str] = ["galfit"]

    def get_ficlos(
        self,
        fields: list[str] | None = None,
        image_versions: list[str] | None = None,
        catalog_versions: list[str] | None = None,
        filters: list[str] | None = None,
        objects: list[int] | None = None,
        pixscales: list[float] | None = None,
        morphology_versions: list[str] | None = None,
    ) -> Generator[FICLO, None, None]:
        """Generate all FICLO permutations from passed configurations, or
        program configurations if former not passed.

        Parameters
        ----------
        fields : list[str] | None, optional
            List of fields over which to execute GALFIT, by default None (all).
        image_versions : list[str] | None, optional
            List of image versions over which to execute GALFIT, by default None
            (all).
        catalog_versions : list[str] | None, optional
            List of catalog versions over which to execute GALFIT, by default
            None (all).
        filters : list[str] | None, optional
            List of filters over which to execute GALFIT, by default None (all).
        objects : list[int] | None, optional
            List of target IDs corresponding to images and their catalogs, over
            which to execute GALFIT, by default None (all).
        pixscales : list[float] | None, optional
            List of pixel scales over which to execute GALFIT, by default None
            (all).
        morphology_versions : list[str] | None, optional
            List of morphology fitting methods to execute, by default None
            (all).

        Yields
        ------
        FICLO
            FICLO permutation from passed parameters.
        """
        for (
            field,
            image_version,
            catalog_version,
            filter,
            object,
            pixscale,
            morphology_version,
        ) in itertools.product(
            self.fields if fields is None else fields,
            self.image_versions if image_versions is None else image_versions,
            self.catalog_versions if catalog_versions is None else catalog_versions,
            self.filters if filters is None else filters,
            self.objects if objects is None else objects,
            self.pixscales if pixscales is None else pixscales,
            (
                self.morphology_versions
                if morphology_versions is None
                else morphology_versions
            ),
        ):
            yield FICLO(
                field=field,
                image_version=image_version,
                catalog_version=catalog_version,
                filter=filter,
                object=object,
                pixscale=pixscale,
                morphology_version=morphology_version,
            )
