"""Configure and setup a program executionOptional\[ of the GalWrap package.
"""

# Imports


from typing import Optional, Generator, Annotated
from pathlib import Path
import itertools

from pydantic import BaseModel, StringConstraints
import yaml
from astropy.table import Table

from .utils import utils


# Classes


LowerStr = Annotated[str, StringConstraints(to_lower=True)]
"""Lowercase string type for pydantic model.
"""


class FICLO(BaseModel):
    """Configuration model for a single program execution of GALFIT.

    Parameters
    ----------
    BaseModel : class
        Base pydantic model class to enforce type validation upon creation.

    Attributes
    ----------
    field : str
        Field of observation, e.g. "abell2744clu".
    image_version : str
        Version string of JWST image processing, e.g. "grizli-v7.2".
    catalog_version : str
        Version string of JWST cataloging, e.g. "dja-v7.2".
    filter : str
        Observational filter band, e.g. "f140w".
    object : int
        Integer ID of galaxy or cluster target in catalog, e.g. `1003`.
    pixscale : str, optional
        Pixel scale, in arcseconds per pixel, by default `0.04`, corresponding
        to "40mas".
    morphology_version : str, optional
        Version string of morphology fitting method, by default "galfit".

    Notes
    -----
    All strings upon instantiation will be converted to lowercase.
    FICLO refers to the Field, Image version, Catalog version, fiLter, and
    Object of a GALFIT execution.
    """

    field: LowerStr
    image_version: LowerStr
    catalog_version: LowerStr
    filter: LowerStr
    object: int
    pixscale: float = 0.04
    morphology_version: LowerStr = "galfit"


class GalWrapConfig(BaseModel):
    """Configuration model for a program execution of GalWrap.

    Parameters
    ----------
    BaseModel : class
        Base pydantic model class to enforce type validation upon creation.

    Attributes
    ----------
    input_root : Path
        Path to root directory of input products, e.g. catalogs, science images,
        and PSFs.
    product_root : Path
        Path to root directory of products generated by this program to execute
        GALFIT, e.g. cutouts/stamps, masks, and feedfiles.
    output_root : Path
        Path to root directory of GALFIT output products, e.g. morphology model
        and plots.
    fields : list[str]
        List of fields over which to execute GALFIT.
    image_versions : list[str]
        List of image versions over which to execute GALFIT.
    catalog_versions : list[str]
        List of catalog versions over which to execute GALFIT.
    filters : list[str]
        List of filter bands over which to execute GALFIT.
    objects : list[int]
        List of target IDs over which to execute GALFIT, for each catalog.
    pixscales : list[float], optional
        List of pixel scales over which to execute GALFIT, by default only `0.04`,
        corresponding to "40mas".
    morphology_versions : list[str], optional
        List of morphology fitting methods to execute, by default only GALFIT.
    """

    input_root: Path
    product_root: Path
    output_root: Path
    fields: list[str]
    image_versions: list[str]
    catalog_versions: list[str]
    filters: list[str]
    objects: list[int]
    pixscales: list[float] = [0.04]
    morphology_versions: list[str] = ["galfit"]

    def get_ficlos(
        self,
        fields: list[str] | None = None,
        image_versions: list[str] | None = None,
        catalog_versions: list[str] | None = None,
        filters: list[str] | None = None,
        objects: list[int] | None = None,
        pixscales: list[float] | None = None,
        morphology_versions: list[str] | None = None,
    ) -> Generator[FICLO, None, None]:
        """Generate all FICLO permutations from passed configurations, or
        program configurations if former not passed.

        Parameters
        ----------
        fields : list[str] | None, optional
            List of fields over which to execute GALFIT, by default None (all).
        image_versions : list[str] | None, optional
            List of image versions over which to execute GALFIT, by default None
            (all).
        catalog_versions : list[str] | None, optional
            List of catalog versions over which to execute GALFIT, by default
            None (all).
        filters : list[str] | None, optional
            List of filters over which to execute GALFIT, by default None (all).
        objects : list[int] | None, optional
            List of target IDs corresponding to images and their catalogs, over
            which to execute GALFIT, by default None (all).
        pixscales : list[float] | None, optional
            List of pixel scales over which to execute GALFIT, by default None
            (all).
        morphology_versions : list[str] | None, optional
            List of morphology fitting methods to execute, by default None
            (all).

        Yields
        ------
        FICLO
            FICLO permutation from passed parameters.
        """
        # Generate FICLO permutations from all specified configurations
        for (
            field,
            image_version,
            catalog_version,
            filter,
            object,
            pixscale,
            morphology_version,
        ) in itertools.product(
            self.fields if fields is None else fields,
            self.image_versions if image_versions is None else image_versions,
            self.catalog_versions if catalog_versions is None else catalog_versions,
            self.filters if filters is None else filters,
            self.objects if objects is None else objects,
            self.pixscales if pixscales is None else pixscales,
            (
                self.morphology_versions
                if morphology_versions is None
                else morphology_versions
            ),
        ):
            yield FICLO(
                field=field,
                image_version=image_version,
                catalog_version=catalog_version,
                filter=filter,
                object=object,
                pixscale=pixscale,
                morphology_version=morphology_version,
            )


# Functions


def create_config(
    config_path: str | Path | None = None,
    input_root: str | Path | None = None,
    product_root: str | Path | None = None,
    output_root: str | Path | None = None,
    field: str | None = None,
    fields: list[str] | None = None,
    image_version: str | None = None,
    image_versions: list[str] | None = None,
    catalog_version: str | None = None,
    catalog_versions: list[str] | None = None,
    filter: str | None = None,
    filters: list[str] | None = None,
    object: int | None = None,
    objects: list[int] | None = None,
    pixscale: float | None = None,
    pixscales: list[float] | None = None,
    morphology_version: str | None = None,
    morphology_versions: list[str] | None = None,
) -> GalWrapConfig:
    """Create a configuration object from hierarchically preferred variables, in
    order of CLI passed values, then config file declared values, then values
    found by directory discovery.

    Parameters
    ----------
    config_path : str | Path | None, optional
        Path to user config yaml file, by default None (no user config file
        provided).
    input_root : str | Path | None, optional
        Path to root directory of input products, e.g. catalogs, science images,
        and PSFs, by default None (not passed through CLI).
    product_root : str | Path | None, optional
        Path to root directory of products generated by this program to execute
        GALFIT, e.g. cutouts/stamps, masks, and feedfiles, by default None (not
        passed through CLI).
    output_root : str | Path | None, optional
        Path to root directory of GALFIT output products, e.g. morphology model
        and plots, by default None (not passed through CLI).
    field : str | None, optional
        Single field over which to execute GALFIT, by default None (not passed
        through CLI).
    fields : list[str] | None, optional
        List of fields over which to execute GALFIT, by default None (not passed
        through CLI).
    image_version : str | None, optional
        Single image version over which to execute GALFIT, by default None (not
        passed through CLI).
    image_versions : list[str] | None, optional
        List of image versions over which to execute GALFIT, by default None
        (not passed through CLI).
    catalog_version : str | None, optional
        Single catalog version over which to execute GALFIT, by default None
        (not passed through CLI).
    catalog_versions : list[str] | None, optional
        List of catalog versions over which to execute GALFIT, by default None
        (not passed through CLI).
    filter : str | None, optional
        Single filter band over which to execute GALFIT, by default None (not
        passed through CLI).
    filters : list[str] | None, optional
        List of filter bands over which to execute GALFIT, by default None (not
        passed through CLI).
    object : int | None, optional
        Single target IDs over which to execute GALFIT, for each catalog, by
        default None (not passed through CLI).
    objects : list[int] | None, optional
        List of target IDs over which to execute GALFIT, for each catalog, by
        default None (not passed through CLI).
    pixscale : float | None, optional
        Single pixel scale over which to execute GALFIT, by default None (not
        passed through CLI).
    pixscales : list[float] | None, optional
        List of pixel scales over which to execute GALFIT, by default None (not
        passed through CLI).
    morphology_version : str | None, optional
        Single morphology fitting method to execute, by default None (not passed
        through CLI).
    morphology_versions : list[str] | None, optional
        List of morphology fitting methods to execute, by default None (not
        passed through CLI).

    Returns
    -------
    GalWrapConfig
        A configuration object for this program execution.

    Notes
    -----
    If both the single and multiple version for a variable are given (e.g.
    `field` and `fields` both have values from CLI), only the single version
    will be used.
    """
    # Load config file values
    config_dict = {} if config_path is None else yaml.safe_load(open(config_path))

    # Set any parameters passed through CLI call
    ## Paths
    if input_root is not None:
        config_dict["input_root"] = utils.get_path(input_root)
    if product_root is not None:
        config_dict["product_root"] = utils.get_path(product_root)
    if output_root is not None:
        config_dict["output_root"] = utils.get_path(output_root)

    ## Multiple FICLOs
    if fields is not None:
        config_dict["fields"] = fields
    if image_versions is not None:
        config_dict["image_versions"] = image_versions
    if catalog_versions is not None:
        config_dict["catalog_versions"] = catalog_versions
    if filters is not None:
        config_dict["filters"] = filters
    if objects is not None:
        config_dict["objects"] = objects
    if pixscales is not None:
        config_dict["pixscales"] = pixscales
    if morphology_versions is not None:
        config_dict["morphology_versions"] = morphology_versions

    ## Single FICLOs - note this will override multiple FICLOs if set
    if field is not None:
        config_dict["fields"] = [field]
    if image_version is not None:
        config_dict["image_versions"] = [image_version]
    if catalog_version is not None:
        config_dict["catalog_versions"] = [catalog_version]
    if filter is not None:
        config_dict["filters"] = [filter]
    if object is not None:
        config_dict["objects"] = [object]
    if pixscale is not None:
        config_dict["pixscales"] = [pixscale]
    if morphology_version is not None:
        config_dict["morphology_versions"] = [morphology_version]

    # TODO If parameters are still unset, assume program execution over all
    # discovered values in input directory
    ## Terminate if input root not found
    if "input_root" not in config_dict:
        raise FileNotFoundError(f"Input root not passed, terminating.")

    # Create GalWrapConfig from dict
    galwrap_config = GalWrapConfig(**config_dict)

    # # Setup directories
    # path.setup_directories(galwrap_config=galwrap_config)

    # # Create filter info tables
    # ## TODO set how ofic is chosen
    # input_science_files: list[Path] = path.get_path(
    #     "file_science_images", galwrap_config=galwrap_config, ofic=ofic
    # )
    # for input_science_file in input_science_files:
    #     galwrap_config.filters.append(
    #         input_science_file.name.split("-")[1].split("_")[0]
    #     )
    # ## TODO is this where pixscales are from?
    # galwrap_config.pixscales.append("40mas")

    # ## Create table of three columns in order of filters, pixscales, and pixnames
    # num_filters = len(galwrap_config.filters)
    # filter_info = Table(
    #     [
    #         galwrap_config.filters,
    #         [galwrap_config.pixscales[0] for i in range(num_filters)],
    #         [
    #             utils.scale_to_name(galwrap_config.pixscales[0])
    #             for i in range(num_filters)
    #         ],
    #     ]
    # )

    # ## Write table to file
    # ascii.write(
    #     filter_info,
    #     path.get_path("file_filter_info", galwrap_config=galwrap_config, ofic=ofic),
    # )

    # Return created config object
    return galwrap_config


# Instantiations


galwrap_config = create_config()
"""Config object instantiation.
"""
